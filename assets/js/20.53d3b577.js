(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{376:function(t,a,s){"use strict";s.r(a);var n=s(44),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"read10-抽象数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#read10-抽象数据类型"}},[t._v("#")]),t._v(" read10 抽象数据类型")]),t._v(" "),s("h2",{attrs:{id:"_1-java的访问控制"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_1-java的访问控制"}},[t._v("#")]),t._v(" 1.Java的访问控制")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wallet")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loanTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wallet")]),t._v(" that"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// put all of this wallet's money into that wallet")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*A*/")]),t._v(" \n        that"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*B*/")]),t._v(" \n        amount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*C*/")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wallet")]),t._v(" w "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wallet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*D*/")]),t._v(" \n        w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*E*/")]),t._v(" \n        w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loanTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("private")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wallet")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getNetWorth")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*F*/")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("boolean")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("isBroke")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/*G*/")]),t._v(" \n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wallet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("关于语句/*A*/,")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("that"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("this")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在Java中允许对this.amount的索引")]),t._v(" "),s("li",[t._v("在Java中允许对that.amount的索引")])]),t._v(" "),s("p",[t._v("关于语句/*B*/,")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("amount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在Java中允许对amount的索引")])]),t._v(" "),s("p",[t._v("关于语句/*C*/,")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wallet")]),t._v(" w "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wallet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在Java中允许对Wallet()构造函数的调用")])]),t._v(" "),s("p",[t._v("关于语句/*D*/,")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("100")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在Java中允许对w.amount的索引")])]),t._v(" "),s("p",[t._v("关于语句/*E*/,")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("loanTo")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("在Java中允许对loanTo()的调用")]),t._v(" "),s("li",[t._v("在这句代码执行之后，w指向的Wallet对象的金额将会是0")])]),t._v(" "),s("p",[t._v("关于语句/*F*/,")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("这里关于w.amount的索引不会被允许，因为amount是在另一个类中的私有区域")]),t._v(" "),s("li",[t._v("这个非法访问会被静态捕捉")])]),t._v(" "),s("p",[t._v("关于语句/*G*/,")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Wallet")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("amount "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),s("ul",[s("li",[t._v("这里关于Wallet.amount的索引不会被允许，因为amount是一个私有地址")]),t._v(" "),s("li",[t._v("这里关于Wallet.amount的索引不会被允许，因为amount是一个实例变量")]),t._v(" "),s("li",[t._v("这个非法访问会被静态捕捉")])]),t._v(" "),s("h2",{attrs:{id:"_2-什么是抽象"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_2-什么是抽象"}},[t._v("#")]),t._v(" 2.什么是抽象")]),t._v(" "),s("p",[t._v("抽象数据类型是软件工程中一个普遍原则的实例，从他衍生出很多意思相近的名词。这里列出了几个能够表达其中思想的词：")]),t._v(" "),s("ul",[s("li",[t._v("抽象：忽略底层的细节而在高层思考")]),t._v(" "),s("li",[t._v("模块化：将系统分为一个模块，每个模块可以单独的进行设计、实现、测试、推倒，并且在剩下的开发中进行复用")]),t._v(" "),s("li",[t._v("封装：在模块的外部建立起一道”围墙“，使它只对自己内部的行为负责，并且系统别处的bug不会影响到它内部的正确性")]),t._v(" "),s("li",[t._v("信息隐藏：将模块的实现细节隐藏，使未来更改模块内部时不必改变外部代码")]),t._v(" "),s("li",[t._v("功能分离：一个模块仅仅负责一个特性/功能，而不是将一个特性运用在很多模块上或一个模块拥有很多特性")])]),t._v(" "),s("p",[t._v("这些思想的本质目的都是为了实现我们的三个目标：远离bug、易于理解、可改动。")]),t._v(" "),s("p",[t._v("事实上，我们在设计方法和规格说明的时候，就已经接触过这些思想：")]),t._v(" "),s("ul",[s("li",[t._v("抽象：规格说明使得使用者只需要弄懂规格说明并遵守前置条件，而不是让他们去弄懂底层的代码实现")]),t._v(" "),s("li",[t._v("模块化：单元测试和规格说明都帮助了将方法模块化")]),t._v(" "),s("li",[t._v("封装：方法中的局部变量都是被封装的，因为它们仅仅可以在方法内部使用。与此相对的是全局变量和指向可变对象的别名，它们会对封装带来很大损害。")]),t._v(" "),s("li",[t._v("信息隐藏：规格说明就是一种信息隐藏，它使得实现者可以自由的更改实现代码")]),t._v(" "),s("li",[t._v("功能分离：一个规格说明应该是逻辑明确的，即它不能有很多特性，而应该完成好一个功能")])]),t._v(" "),s("h2",{attrs:{id:"_3-用户定义类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_3-用户定义类型"}},[t._v("#")]),t._v(" 3.用户定义类型")]),t._v(" "),s("p",[t._v("对数据进行抽象的核心思想就是类型通过其对应的操作来区分：")]),t._v(" "),s("ul",[s("li",[t._v("一个整形就是你能对它进行加法和乘法的东西")]),t._v(" "),s("li",[t._v("一个布尔型就是你能对它进行取反的东西")]),t._v(" "),s("li",[t._v("一个字符串就是你能对它进行连接或者取子字符串的东西")])]),t._v(" "),s("p",[t._v("真正使得抽象类型变得新颖不同的是对操作的强调：用户不用管这个类型里面的数据是怎么保存表示的，就好像是程序员不用管编译器是怎么存储整数一样。起作用的只是类型对应的操作。")]),t._v(" "),s("p",[t._v("和很多现代语言一样，在Java中内置类型和用户定义类型之间的关系很模糊。例如在java.lang中的类Integer和Boolean就是内置的--Java标准中规定它们必须存在，但是它们的定义和用户定义类型的方法是一样的。")]),t._v(" "),s("h2",{attrs:{id:"_4-类型和操作的分类"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_4-类型和操作的分类"}},[t._v("#")]),t._v(" 4.类型和操作的分类")]),t._v(" "),s("p",[t._v("类型分为可改变和不可变两种。")]),t._v(" "),s("p",[t._v("其中可改变类型的对象能够被改变：它们提供了改变对象内容的操作，这样的操作执行后可以改变其他对该对象操作的返回值。")]),t._v(" "),s("p",[t._v("String是不可改变的，因为它的操作符都是创建一个新的String对象而不是改变现有的这个。")]),t._v(" "),s("p",[t._v("有时候，一个类型会提供两种形式，一种是可改变的一种是不可改变的。例：StringBuilder就是一种可改变的字符串类型。")]),t._v(" "),s("p",[t._v("抽象类型的操作符大致分类：")]),t._v(" "),s("ul",[s("li",[t._v("创建者creator：创建一个该类型的新对象。一个创建者可能会接受一个对象作为参数，但是这个对象的类型不能是它创建对象对应的类型。")]),t._v(" "),s("li",[t._v("生产者producer：通过接受同类型的对象创建新的对象。例如String类里面的concat方法就是一个生产者，它接受两个字符串然后据此产生一个新的字符串。")]),t._v(" "),s("li",[t._v("观察者observer：接受一个同类型的对象然后返回一个不同类型的对象/值。例如List的size方法，它返回一个int。")]),t._v(" "),s("li",[t._v("改造者mutator：改变对象的内容，例如List的add方法，它会在列表中添加一个元素。")])]),t._v(" "),s("h2",{attrs:{id:"_5-抽象数据类型的例子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_5-抽象数据类型的例子"}},[t._v("#")]),t._v(" 5.抽象数据类型的例子")]),t._v(" "),s("p",[t._v("int 是Java中的原始整数类型，它是不可变类型，没有改造者")]),t._v(" "),s("ul",[s("li",[t._v("creators:字面量0,1,2,...")]),t._v(" "),s("li",[t._v("producers:算术符+,-,*,/")]),t._v(" "),s("li",[t._v("observers:比较符号==,!=,<,>")]),t._v(" "),s("li",[t._v("mutators:无")])]),t._v(" "),s("p",[t._v("List是Java中的列表类型，他是可更改类型。另外，List也是一个接口，所以对于它的实现 可以有很多类，例如ArrayList和LinkedList.")]),t._v(" "),s("ul",[s("li",[t._v("creators:ArrayList和LinkedList的构造函数,Collections.singletonList")]),t._v(" "),s("li",[t._v("producersl:Collections.unmodifiableList")]),t._v(" "),s("li",[t._v("observers:size,get")]),t._v(" "),s("li",[t._v("mutators:add,remove,addAll,Collections.sort")])]),t._v(" "),s("p",[t._v("String是Java中的字符串类型，它是不可变类型")]),t._v(" "),s("ul",[s("li",[t._v("creators:String构造函数，valueOf静态方法")]),t._v(" "),s("li",[t._v("producers：concat，substring，toUpperCase")]),t._v(" "),s("li",[t._v("observers:length,charAt")]),t._v(" "),s("li",[t._v("mutators:无")])]),t._v(" "),s("p",[t._v("对于复杂的数据类型，有些操作可能既是生产者，也是改造者。")]),t._v(" "),s("p",[t._v("例如：BufferedReader.readLine()是改造者。")]),t._v(" "),s("h2",{attrs:{id:"_6-抽象类型是通过它的操作定义的"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_6-抽象类型是通过它的操作定义的"}},[t._v("#")]),t._v(" 6.抽象类型是通过它的操作定义的")]),t._v(" "),s("p",[t._v("这一节的重要思想是抽象类型是通过它的操作定义的。")]),t._v(" "),s("p",[t._v("对于类型T来说，它的操作集合和规格说明完全定义和构造了它的特性。")]),t._v(" "),s("p",[t._v("例如：当我们谈到List类型时，我们并没有特指一个数组或者链接链表，而是一些列模糊的值--哪些对象可以是List类型--满足该类型的规格说明和操作规定，例如get(),size(),等等。")]),t._v(" "),s("p",[s("img",{attrs:{src:"https://i.loli.net/2021/06/08/DnHELGFygchRdMw.png",alt:"屏幕截图 2021-06-08 182038.png"}})]),t._v(" "),s("p",[s("strong",[t._v("模糊的值是指我们不能检查数据具体是在类型中怎么存储的，而是要通过特定的操作取处理。例如上图中画出的，通过规格说明这道防火墙，我们将类型中具体的实现和这些实现共享的私有数据封装起来，而用户只能看到和使用接口上的操作。")])]),t._v(" "),s("h2",{attrs:{id:"_7-设计抽象类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_7-设计抽象类型"}},[t._v("#")]),t._v(" 7.设计抽象类型")]),t._v(" "),s("p",[t._v("设计一个抽象类型包括选择合适的操作以及它们对应的行为，这里列出了几个重要的原则。")]),t._v(" "),s("ul",[s("li",[t._v("设计少量、简单，可以组合实现强大功能的操作而非设计很多复杂的操作")]),t._v(" "),s("li",[t._v("每个操作都应该有一个被明确定义的目的，并且应该设计为对不同的数据结构有一直的行为，而不是针对某些特殊情况。")]),t._v(" "),s("li",[t._v("操作集合应该充分的考虑到用户的需求，也就是说，用户可以用这个操作集合做它们可能想做的计算。")]),t._v(" "),s("li",[t._v("抽象类型可以是通用的：例如，列表、集合，或者图。或者它可以是适用于特定领域的：一个街道的地图，一个员工数据库，一个电话簿。但是一个抽象类型不能兼有上述二者的特性。")])]),t._v(" "),s("h2",{attrs:{id:"_8-表示独立"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_8-表示独立"}},[t._v("#")]),t._v(" 8.表示独立")]),t._v(" "),s("p",[t._v("表示独立性：client使用ADT时无需考虑其内部如何实现，ADT内部表示的变化不应影响外部spec和客户端。")]),t._v(" "),s("p",[t._v("特别地，一个好的抽象数据类型应该是表示独立的，这意味着它的使用和它的内部表示(实际的数据结构和实现)无关，所以内部表示的改变将对外部的代码没有影响。\n例如List，它的使用与是用数组还是链表实现无关。")]),t._v(" "),s("p",[t._v("如果一个操作完全在规格说明中定义了前置条件和后置条件，使用者就知道他应该依赖说明，而你也可以安全的对内部实现进行更改。")]),t._v(" "),s("p",[t._v("例：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* Represents a family that lives in a household together.\n* A family always has at least one person in it.\n* Families are mutable.\n*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Family")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the people in the family, sorted from oldest to youngest, with no duplicates.")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" people"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n    * @return a list containing all the members of the family, with no duplicates.\n    */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMembers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" people"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("下面是一个使用者的代码：")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("client1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Family")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// get youngest person in the family")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),t._v(" baby "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("people"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("f"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("people"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("size")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("假设所有的代码都能顺利运行(Family和client1)并通过测试。")]),t._v(" "),s("p",[t._v("当Family的数据表示从List变为了Set，")]),t._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n* Represents a family that lives in a household together.\n* A family always has at least one person in it.\n* Families are mutable.\n*/")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Family")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// the people in the family")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Set")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" people"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/**\n    * @return a list containing all the members of the family, with no duplicates.\n    */")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("List")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Person")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("getMembers")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ArrayList")]),s("span",{pre:!0,attrs:{class:"token generics"}},[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("<")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(">")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("people"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("client1依赖与Family的数据表示，并且这种依赖会导致静态错误。")]),t._v(" "),s("h2",{attrs:{id:"_9-测试抽象数据类型"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_9-测试抽象数据类型"}},[t._v("#")]),t._v(" 9.测试抽象数据类型")]),t._v(" "),s("p",[t._v("当我们测试一个抽象数据类型的时候，我们分别测试它的各个操作。\n而这些测试不可避免的要交互：我们只能通过观察者来判断其他的操作的测试是否成功，而测试观察者的唯一方法时创建对象然后使用观察者。")]),t._v(" "),s("h2",{attrs:{id:"_10-总结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#_10-总结"}},[t._v("#")]),t._v(" 10.总结")]),t._v(" "),s("ul",[s("li",[t._v("抽象数据类型(ADT)时通过它们对应的操作区分的。")]),t._v(" "),s("li",[t._v("操作可以分类为创建者、生产者、观察者、改造者。")]),t._v(" "),s("li",[t._v("ADT的表示由它的操作集合和规格说明组成。")]),t._v(" "),s("li",[t._v("一个好的ADT应该是简单，逻辑明确并且表示独立。")]),t._v(" "),s("li",[t._v("对于ADT的测试应该对每一个操作进行测试，并同时利用到创建者、生产者、观察者、改造者。")])])])}),[],!1,null,null,null);a.default=e.exports}}]);