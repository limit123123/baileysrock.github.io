(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{373:function(t,e,i){"use strict";i.r(e);var r=i(44),v=Object(r.a)({},(function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[i("h1",{attrs:{id:"实验二"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实验二"}},[t._v("#")]),t._v(" 实验二")]),t._v(" "),i("h2",{attrs:{id:"实验目标概述"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实验目标概述"}},[t._v("#")]),t._v(" 实验目标概述")]),t._v(" "),i("p",[t._v("本次实验训练抽象数据类型（ADT）的设计、规约、测试，并使用面向对象编程（OOP）技术实现ADT。具体来说：")]),t._v(" "),i("ul",[i("li",[t._v("针对给定的应用问题，从问题描述中识别所需的ADT；")]),t._v(" "),i("li",[t._v("设计ADT规约（pre-condition、post-condition）并评估规约的质量；")]),t._v(" "),i("li",[t._v("根据ADT的规约设计测试用例；")]),t._v(" "),i("li",[t._v("ADT的泛型化；")]),t._v(" "),i("li",[t._v("根据规约设计ADT的多种不同的实现；针对每种实现，设计其表示（representation）、表示不变性（rep invariant）、抽象过程（abstraction function）")]),t._v(" "),i("li",[t._v("使用OOP实现ADT，并判定表示不变性是否违反、各实现是否存在表示泄露（rep exposure）；")]),t._v(" "),i("li",[t._v("测试ADT的实现并评估测试的覆盖度；")]),t._v(" "),i("li",[t._v("使用ADT及其实现，为应用问题开发程序；")]),t._v(" "),i("li",[t._v("在测试代码中，能够写出testing strategy并据此设计测试用例。")])]),t._v(" "),i("h2",{attrs:{id:"实验环境配置"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实验环境配置"}},[t._v("#")]),t._v(" 实验环境配置")]),t._v(" "),i("p",[t._v("环境配置：\nIntelliJ IDEA 2020.3.1  (JDK 1.8  Junit 4.12(下载到lib目录中))")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image002.png",alt:"image002.png"}})]),t._v(" "),i("p",[t._v("GitHub Lab2 URL:\n"),i("a",{attrs:{href:"https://github.com/ComputerScienceHIT/HIT-Lab2-1190200708",target:"_blank",rel:"noopener noreferrer"}},[t._v("github url"),i("OutboundLink")],1)]),t._v(" "),i("h2",{attrs:{id:"实验过程"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实验过程"}},[t._v("#")]),t._v(" 实验过程")]),t._v(" "),i("h3",{attrs:{id:"poetic-walks"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#poetic-walks"}},[t._v("#")]),t._v(" Poetic Walks")]),t._v(" "),i("h4",{attrs:{id:"get-the-code-and-prepare-git-repository"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#get-the-code-and-prepare-git-repository"}},[t._v("#")]),t._v(" Get the code and prepare Git repository")]),t._v(" "),i("p",[t._v("使用git clone命令从远程仓库中获取源代码")]),t._v(" "),i("p",[t._v("git clone https://github.com/rainywang/Spring2020_HITCS_SC_Lab2/tree/master/P1")]),t._v(" "),i("p",[t._v("并在本地使用git init命令建立git仓库。")]),t._v(" "),i("p",[t._v("通过git add . 命令添加所有文件，在通过git commit -m “message”的命令，提交本地项目，通过git remote add origin <url>的命令关联远程仓库，并使用git push -u origin master的命令，将其推送到远程github仓库。")]),t._v(" "),i("p",[t._v("我们也可以通过git log命令，详细查看提交记录，可以查看到不同版本。")]),t._v(" "),i("p",[i("strong",[t._v("总结：我们可以通过git status查看状态，git add . 添加文件，git commit -m “描述信息”生成版本控制，git log查看不同版本。")])]),t._v(" "),i("h4",{attrs:{id:"problem-1-test-graph-string"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#problem-1-test-graph-string"}},[t._v("#")]),t._v(" Problem 1: Test Graph <String>")]),t._v(" "),i("ul",[i("li",[t._v("1>\tpublic boolean add(L vertex);")])]),t._v(" "),i("p",[t._v("设计：我们此时根据图是否为空，待添加顶点是否在图中作为输入的区分，因此我们应该对这几种情况的笛卡尔积做测试。将此时分为三种情况：")]),t._v(" "),i("p",[t._v("图为空，则vertex不在图中")]),t._v(" "),i("p",[t._v("图不为空，且vertex不在图中")]),t._v(" "),i("p",[t._v("图不为空，且vertex在图中")]),t._v(" "),i("p",[t._v("思路、过程：根据方法上方的注释分析，此时我们需要添加一个顶点到这个图，若该图中没有包含该顶点，则返回true，否则我们应该返回false。因此，对于这种情况，我们应该测试输入作如下分区：图是否为空图，当前顶点是否在图中。并对这两种情况做笛卡尔积，排除掉图为空，且当前顶点在图中的情况。")]),t._v(" "),i("p",[t._v("结果：分别对三种情况做测试，测试通过。")]),t._v(" "),i("ul",[i("li",[t._v("2>\tpublic int set(L source, L target, int weight);")])]),t._v(" "),i("p",[t._v("设计：此时根据图是否为空，当前的边是否在图中，当前的顶点是否在图中，以及weight是否为0分区。对这些分区求笛卡尔积做测试，由于分区的笛卡尔积存在某些不可能出现的情况，故此时分为以下几种情况：")]),t._v(" "),i("p",[t._v("顶点在图中，边不在图中，图不为空，weight=0")]),t._v(" "),i("p",[t._v("顶点不在图中，边不在图中，图为空，weight=0")]),t._v(" "),i("p",[t._v("顶点在图中，边在图中，图不为空，weight=0")]),t._v(" "),i("p",[t._v("顶点在图中，边在图中，图不为空，weight!=0")]),t._v(" "),i("p",[t._v("顶点在图中，边不在图中，图不为空，weight!=0")]),t._v(" "),i("p",[t._v("顶点不在图中，边不在图中，图为空，weight!=0")]),t._v(" "),i("p",[t._v("思路、过程：根据方法上方的注释分析，我们需要添加，改变，或删除一个加权有向边在这个图中，如果weight!=0，则添加一条边，或更新该边的权值。若给定标签的顶点没有出现，则带有给定的标签的顶点将被添加到图中，若weight==0，且存在这条边，则去除这条边，返回之前边的权值。因此我们可以据此，对图是否为空，当前的边是否在图中，当前的顶点是否在图中，以及weight是否为0分区")]),t._v(" "),i("p",[t._v("结果：分别对以上几种情况测试，测试通过。")]),t._v(" "),i("ul",[i("li",[t._v("3>\tpublic boolean remove(L vertex);")])]),t._v(" "),i("p",[t._v("设计：此时可以根据当前顶点是否在图中进行分区，则一共分为两种。")]),t._v(" "),i("p",[t._v("当前顶点在图中")]),t._v(" "),i("p",[t._v("当前顶点不在图中")]),t._v(" "),i("p",[t._v("思路、过程：根据方法上方的注释分析，从图中去掉一个顶点，任何和这个顶点相关的边都删除。")]),t._v(" "),i("p",[t._v("结果：分别对以上几种情况测试，测试通过。")]),t._v(" "),i("p",[t._v("4>\tpublic Set<L> vertices();")]),t._v(" "),i("p",[t._v("设计：此时可以根据图是否为空，判断当前是否会返回值，因此分为以下两种情况。")]),t._v(" "),i("p",[t._v("图为空")]),t._v(" "),i("p",[t._v("图不为空")]),t._v(" "),i("p",[t._v("思路、过程：根据方法上方的注释分析，返回这个图中所有的顶点。")]),t._v(" "),i("p",[t._v("结果：分别对以上两种情况测试，测试通过。")]),t._v(" "),i("p",[t._v("5>\tpublic Map<L, Integer> sources(L target);")]),t._v(" "),i("p",[t._v("设计：此时可以根据顶点是否在图中，顶点是否存在源顶点分区。")]),t._v(" "),i("p",[t._v("顶点在图中，顶点存在源顶点")]),t._v(" "),i("p",[t._v("顶点不在图中，顶点不存在源顶点")]),t._v(" "),i("p",[t._v("顶点在图中，定点不存在源顶点")]),t._v(" "),i("p",[t._v("顶点不在图中，顶点存在源顶点")]),t._v(" "),i("p",[t._v("思路、过程：根据方法上方的注释分析，获取带有指向目标顶点的边的源顶点以及这些边的权值。因此我们可以根据当前顶点是否在图中，以及定点是否存在源顶点分区。")]),t._v(" "),i("p",[t._v("结果：分别对以上四种情况测试，测试通过。")]),t._v(" "),i("p",[t._v("6>\tpublic Map<L, Integer> targets(L source);")]),t._v(" "),i("p",[t._v("设计：此时可以根据顶点是否在图中，顶点是否存在目标顶点分区。")]),t._v(" "),i("p",[t._v("顶点在图中，顶点存在目标顶点")]),t._v(" "),i("p",[t._v("顶点不在图中，顶点存在目标顶点")]),t._v(" "),i("p",[t._v("顶点在图中，顶点不存在目标顶点")]),t._v(" "),i("p",[t._v("顶点不在图中，顶点不存在目标顶点")]),t._v(" "),i("p",[t._v("思路、过程：根据方法上方的注释分析，我们需要从源顶点获得带有有向边的目标顶点以及这些边的权值。因此我们可以对当前顶点是否在图中、当前顶点是否存在目标顶点分区。")]),t._v(" "),i("p",[t._v("结果：分别对以上四种情况测试，测试通过。")]),t._v(" "),i("p",[t._v("以下截图为在实现Problem2后对Problem1进行的测试：")]),t._v(" "),i("p",[t._v("依次通过ConcreteEdgesGraph与ConcreteVerticesGraph实现：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image004.png",alt:"image004.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image005.png",alt:"image005.png"}})]),t._v(" "),i("h4",{attrs:{id:"problem-2-implement-graph-string"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#problem-2-implement-graph-string"}},[t._v("#")]),t._v(" Problem 2: Implement Graph <String>")]),t._v(" "),i("h5",{attrs:{id:"implement-concreteedgesgraph"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#implement-concreteedgesgraph"}},[t._v("#")]),t._v(" Implement ConcreteEdgesGraph")]),t._v(" "),i("ul",[i("li",[t._v("1>\tEdge类：")])]),t._v(" "),i("p",[t._v("Edge类的私有变量如下，由于Edge类的变量都是用private、final修饰，且String、Integer均为不可变类型，因此Edge类不可变：")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("变量")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("意义")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("private final String source;")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("边的起点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("private final String target;")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("边的终点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("private final Integer weight;")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("边的权值")])])])]),t._v(" "),i("p",[i("strong",[t._v("Edge类的方法如下：")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("意义")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Edge(final String sourceConstruct,final String targetConstruct,final int weightConstruct)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("构造函数")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public void checkRep()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("检查不变量，weight>0, source!=null, target!=null")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public String getWeight ()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("获取边的weight值")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public String getSource ()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("获取边的起点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public String getTarget()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("获取边的终点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public String toString()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回边的字符串表示")])])])]),t._v(" "),i("ul",[i("li",[t._v("// Abstraction function:")]),t._v(" "),i("li",[t._v("// 从source到target，且权值为weight的有向边")]),t._v(" "),i("li",[t._v("// Representation invariant:")]),t._v(" "),i("li",[t._v("// weight>0,且source!=null,target!=null")]),t._v(" "),i("li",[t._v("// Safety from rep exposure:")]),t._v(" "),i("li",[t._v("// 使用private和final修饰变量，且使用变量的类型均为不可变类型。")]),t._v(" "),i("li",[t._v("// 避免从外部直接修改的风险。")])]),t._v(" "),i("p",[t._v("CheckRep:")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image006.png",alt:"image006.png"}})]),t._v(" "),i("p",[t._v("我们此时只需要检查this.weight>0,this.target!=null,this.source!=null，即可完成对不变量的检查。")]),t._v(" "),i("p",[t._v("toString:")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image007.png",alt:"image007.png"}})]),t._v(" "),i("p",[t._v("将toString函数打印方法设置如上，方便读取。")]),t._v(" "),i("ul",[i("li",[t._v("2>\tConcreteEdgesGraph类：")])]),t._v(" "),i("p",[t._v("ConcreteEdgesGraph有两个私有变量：")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("变量")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("意义")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("private final Set<String> vertices = new HashSet<>()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("图的所有顶点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("private final List<Edge> edges = new ArrayList<>()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("图的所有边")])])])]),t._v(" "),i("p",[t._v("ConcreteEdgesGraph的方法如下：")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("意义")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public ConcreteEdgesGraph()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("构造函数，创建一个空图")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public void checkRep()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("检查不变量")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean add(String vertex)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("向图中添加一个边")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public int set(String source, String target, int weight)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("添加、该边、或删除一个图中的一个加权有向边")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean remove(String vertex)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("去掉图中的一个顶点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Set<String> vertices()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回图中所有的顶点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Map<String, Integer> sources(String target)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回target顶点的所有源顶点及权值的映射")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Map<String, Integer> targets(String source)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回source顶点的所有目标定点及权值的映射")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public String toString()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回图的字符串表示")])])])]),t._v(" "),i("p",[t._v("继承关系如下所示：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image008.png",alt:"image008.png"}})]),t._v(" "),i("ul",[i("li",[t._v("// Abstraction function:")]),t._v(" "),i("li",[t._v("// 由顶点为vertices、边为edges组成的图")]),t._v(" "),i("li",[t._v("// 即从vertices、edges到有向图的映射")]),t._v(" "),i("li",[t._v("// Representation invariant:")]),t._v(" "),i("li",[t._v("// edges.getWeight>0,且edges中不存在两条相同的边")]),t._v(" "),i("li",[t._v("// vertices中的顶点不为空")]),t._v(" "),i("li",[t._v("// Safety from rep exposure:")]),t._v(" "),i("li",[t._v("// 使用private和final修饰变量")]),t._v(" "),i("li",[t._v("// 使用防御性复制")])]),t._v(" "),i("p",[t._v("CheckRep:")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image009.png",alt:"image009.png"}})]),t._v(" "),i("p",[t._v("检查edges中是否存在相同的边，edges中每条边的权值是否大于，以及是否存在顶点为空的情况。")]),t._v(" "),i("p",[t._v("toString:")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image010.png",alt:"image010.png"}})]),t._v(" "),i("p",[t._v("将toString函数打印方法设置如上，方便读取。")]),t._v(" "),i("ul",[i("li",[t._v("3>\t测试策略")])]),t._v(" "),i("p",[t._v("对ConcreteEdgesGraph类的测试策略如下：")]),t._v(" "),i("ol",[i("li",[t._v("public boolean add(String vertex)\n"),i("ul",[i("li",[t._v("// Testing s* trategy for ConcreteEdgesGraph.add()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether the vertex is in the vertices")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public int set(String source, String target, int weight)\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteEdgesGraph.set()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether the edge is in the graph")]),t._v(" "),i("li",[t._v("// weight : >0 =0")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public boolean remove(String vertex)\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteEdgesGraph.remove()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether the vertex is in the graph")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public Set<String> vertices()\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteEdgesGraph.vertices()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether the graph is empty")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public Map<String, Integer> sources(String target)\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteEdgesGraph.sources()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether the target has sources")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public Map<String, Integer> targets(String source)\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteEdgesGraph.targets()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether the source has targets")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public String toString()\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteEdgesGraph.toString()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether the graph is empty")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])])]),t._v(" "),i("p",[t._v("对Edge类的测试策略如下：")]),t._v(" "),i("ol",[i("li",[t._v("public String getWeight ()\n"),i("ul",[i("li",[t._v("// Testing strategy for Edge.getWeight()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// Whether the weght is null")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public String getSource ()\n"),i("ul",[i("li",[t._v("// Testing strategy for Edge.getSource()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// Whether the source is null")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public String getTarget()\n"),i("ul",[i("li",[t._v("// Testing strategy for Edge.getTarget()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// Whether the target is null")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public String toString()\n"),i("ul",[i("li",[t._v("// Testing strategy for Edge.toString()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// Whether the Edge is empty")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])])]),t._v(" "),i("ul",[i("li",[t._v("4>\t测试结果：")])]),t._v(" "),i("p",[t._v("可以看到所有测试通过，并且，代码覆盖率为100%.")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image011.png",alt:"image011.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image012.png",alt:"image012.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image013.png",alt:"image013.png"}})]),t._v(" "),i("h5",{attrs:{id:"implement-concreteverticesgraph"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#implement-concreteverticesgraph"}},[t._v("#")]),t._v(" Implement ConcreteVerticesGraph")]),t._v(" "),i("ul",[i("li",[t._v("1>\tVertex类：")])]),t._v(" "),i("p",[t._v("Vertex中含有两个私有变量：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image014.png",alt:"image014.png"}})]),t._v(" "),i("p",[t._v("以下为Vertex中的方法：")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("意义")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Vertex(final String VertexName);")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("构造函数")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public void checkRep();")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("检查不变量")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean isEqualsVertex(Vertex vertexAnother);")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("检查顶点的名字是否与当前顶点名字相同")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean isEqualsName(String vertexAnother);")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("检查字符串是否与当前顶点名字相同")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public void writeTarget(String vertexAnother, Integer weight);")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("将有向边写入TargetEdge中")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public String Name();")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回当前顶点的名字")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Map<String, Integer> Target();")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回当前顶点所有目标顶点及对应权值")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Integer weight(String vertexAnother);")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回当前顶点所有源顶点及对应权值")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean remove(String vertexTarget);")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("去除掉当前顶点的vertexTarget目标顶点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public String toString();")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回图的字符串表示")])])])]),t._v(" "),i("ul",[i("li",[t._v("// Abstraction function:")]),t._v(" "),i("li",[t._v("// 由顶点的名字及其对应目标顶点的映射所对应的实际顶点表示")]),t._v(" "),i("li",[t._v("// 即由String、Map组成的抽象数据类型对应的顶点")]),t._v(" "),i("li",[t._v("// Representation invariant:")]),t._v(" "),i("li",[t._v("// vertex不为空且TargetEdge中的weight>0")]),t._v(" "),i("li",[t._v("// Safety from rep exposure:")]),t._v(" "),i("li",[t._v("// 使用private、final修饰的变量")]),t._v(" "),i("li",[t._v("// 防御性复制")])]),t._v(" "),i("p",[t._v("CheckRep:")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image015.png",alt:"image015.png"}})]),t._v(" "),i("p",[t._v("检查vertex不为空且TargetEdge中的weight>0。")]),t._v(" "),i("p",[t._v("toString:")]),t._v(" "),i("p",[t._v("将toString函数打印方法设置如上，方便读取。")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image016.png",alt:"image016.png"}})]),t._v(" "),i("p",[t._v("2>\tConcreteVerticesGraph类：")]),t._v(" "),i("p",[t._v("ConcreteVerticesGraph类有一个私有变量：")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("变量")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("意义")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("private final List<Vertex> vertices = new ArrayList<>()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("存储所有顶点")])])])]),t._v(" "),i("p",[t._v("以下为ConcreteVerticesGraph的方法：")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("意义")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public ConcreteVerticesGraph()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("构造函数，创建新的空的图")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public void checkRep()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("检查不变量")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean add(String vertex)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("将顶点添加到图中")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public int set(String source, String")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("target, int weight)")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean remove(String vertex)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("从图中去掉vertex顶点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Set<String> vertices()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回图中所有顶点的集合")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Map<String, Integer> sources(String target)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回target在图中的所有源顶点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Map<String, Integer> targets(String source)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回source在图中的所有目标顶点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public String toString()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回图的字符串表示")])])])]),t._v(" "),i("p",[t._v("继承关系如下：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image017.png",alt:"image017.png"}})]),t._v(" "),i("ul",[i("li",[t._v("// Abstraction function:")]),t._v(" "),i("li",[t._v("// 由vertices组成的顶点")]),t._v(" "),i("li",[t._v("// 即由List<Vertex>类型数据到加权有向图的映射")]),t._v(" "),i("li",[t._v("// Representation invariant:")]),t._v(" "),i("li",[t._v("// vertices中不存在重复的顶点")]),t._v(" "),i("li",[t._v("// Safety from rep exposure:")]),t._v(" "),i("li",[t._v("// 使用private、final修饰变量")]),t._v(" "),i("li",[t._v("// 采用防御性复制")])]),t._v(" "),i("p",[t._v("CheckRep:")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image018.png",alt:"image018.png"}})]),t._v(" "),i("p",[t._v("toString:")]),t._v(" "),i("p",[t._v("将toString函数打印方法设置如上，方便读取.")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image019.png",alt:"image019.png"}})]),t._v(" "),i("ul",[i("li",[t._v("3>\t测试策略:")])]),t._v(" "),i("p",[t._v("对ConcreteVerticesGraph的测试策略：")]),t._v(" "),i("ol",[i("li",[t._v("public boolean add(String vertex)\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteVerticesGraph.add()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// 是否为空图： empty graph？ yes 、no")]),t._v(" "),i("li",[t._v("// 当前的顶点是否在图中：whether vertex is in the graph？ yes 、no")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public int set(String source, String target, int weight)\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteVerticesGraph.set()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// 当前的顶点是否在图中：whether vertex is in the graph？ yes 、no")]),t._v(" "),i("li",[t._v("// value of weight？ =0、>0")]),t._v(" "),i("li",[t._v("// 顶点是否存在目标顶点：whether vertex has target? yes 、no")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public boolean remove(String vertex)\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteVerticesGraph.remove()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// 是否为空图： empty graph？ yes 、no")]),t._v(" "),i("li",[t._v("// 当前的顶点是否在图中：whether vertex is in the graph？ yes 、no")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public Set<String> vertices()\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteVerticesGraph.vertices()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// 是否为空图： empty graph？ yes 、no")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public Map<String, Integer> sources(String target)\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteVerticesGraph.sources()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// 是否为空图： empty graph？ yes 、no")]),t._v(" "),i("li",[t._v("// 当前的顶点是否在图中：whether vertex is in the graph？ yes 、no")]),t._v(" "),i("li",[t._v("// 顶点是否存在源顶点：whether vertex has source? yes 、no")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public Map<String, Integer> targets(String source)\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteVerticesGraph.targets()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// 是否为空图： empty graph？ yes 、no")]),t._v(" "),i("li",[t._v("// 当前的顶点是否在图中：whether vertex is in the graph？ yes 、no")]),t._v(" "),i("li",[t._v("// 顶点是否存在目标顶点：whether vertex has target? yes 、no")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public String toString()\n"),i("ul",[i("li",[t._v("// Testing strategy for ConcreteVerticesGraph.toString()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// empty graph: yes 、no")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])])]),t._v(" "),i("p",[t._v("对Vertex类的测试策略如下：")]),t._v(" "),i("ol",[i("li",[t._v("public boolean isEqualsVertex(Vertex vertexAnother)\n"),i("ul",[i("li",[t._v("// Testing strategy for Vertex.isEqualsVertex()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether vertexAnother is equal to Vertex")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public boolean isEqualsName(String vertexAnother)\n"),i("ul",[i("li",[t._v("// Testing strategy for Vertex.isEqualsName()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether vertexAnother's name is equal to Vertex")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public void writeTarget(String vertexAnother, Integer weight)\n"),i("ul",[i("li",[t._v("// Testing strategy for Vertex.writeTarget()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether vertexAnother is in the TargetEdge")]),t._v(" "),i("li",[t._v("// weight:>0 =0")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public String Name()\n"),i("ul",[i("li",[t._v("// Testing strategy for Vertex.Name()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// whether Vertex is null")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public Map<String, Integer> Target()\n"),i("ul",[i("li",[t._v("// Testing strategy for Vertex.Target()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// wherger TargetEdge is null")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public Integer weight(String vertexAnother)\n"),i("ul",[i("li",[t._v("// Testing strategy for Vertex.weight()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether vertexAnother is in the TargetEdge")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public boolean remove(String vertexTarget)\n"),i("ul",[i("li",[t._v("// Testing strategy for Vertex.remove()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// vertexTarget is in the TargetEdge or not")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public String toString()\n"),i("ul",[i("li",[t._v("// Testing strategy for Vertex.toString()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// vertex is null or not")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])])]),t._v(" "),i("ul",[i("li",[t._v("4>\t测试结果")])]),t._v(" "),i("p",[t._v("可以看到测试全部通过，且代码覆盖率为100%:")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image020.png",alt:"image020.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image021.png",alt:"image021.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image022.png",alt:"image022.png"}})]),t._v(" "),i("h4",{attrs:{id:"problem-3-implement-generic-graph-l"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#problem-3-implement-generic-graph-l"}},[t._v("#")]),t._v(" Problem 3: Implement generic Graph<L>")]),t._v(" "),i("h5",{attrs:{id:"make-the-implementations-generic"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#make-the-implementations-generic"}},[t._v("#")]),t._v(" Make the implementations generic")]),t._v(" "),i("p",[t._v("此时具体类的声明如下：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image023.png",alt:"image023.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image024.png",alt:"image024.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image025.png",alt:"image025.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image026.png",alt:"image026.png"}})]),t._v(" "),i("p",[t._v("并对problem2部分实现的功能修改，使其支持泛型。")]),t._v(" "),i("p",[t._v("将ConcreteEdgesGraph及ConcreteVerticesGraph中部分用String声明的变量修改为L，并且在声明类的时候，使用泛型L。")]),t._v(" "),i("p",[t._v("实现后具体类的修改后，对其测试，发现测试全部通过。且覆盖率仍为100%")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image027.png",alt:"image027.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image028.png",alt:"image028.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image029.png",alt:"image029.png"}})]),t._v(" "),i("h5",{attrs:{id:"implement-graph-empty"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#implement-graph-empty"}},[t._v("#")]),t._v(" Implement Graph.empty()")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image030.png",alt:"image030.png"}})]),t._v(" "),i("p",[t._v("此处选择ConcreteEdgesGraph或ConcreteVerticesGraph中的一个。")]),t._v(" "),i("p",[t._v("为了确保支持不同的类型，分别测试两种不同的类型Integer、Charater。")]),t._v(" "),i("p",[t._v("分别对不同的类型对实现的方法测试：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image031.png",alt:"image031.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image032.png",alt:"image032.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image033.png",alt:"image033.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image034.png",alt:"image034.png"}})]),t._v(" "),i("p",[t._v("如图，此时测试覆盖率为100%.")]),t._v(" "),i("h4",{attrs:{id:"problem-4-poetic-walks"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#problem-4-poetic-walks"}},[t._v("#")]),t._v(" Problem 4: Poetic walks")]),t._v(" "),i("h5",{attrs:{id:"test-graphpoet"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#test-graphpoet"}},[t._v("#")]),t._v(" Test GraphPoet")]),t._v(" "),i("p",[t._v("对GraphPoet类的测试如下：")]),t._v(" "),i("ol",[i("li",[t._v("public GraphPoet(File corpus)\n"),i("ul",[i("li",[t._v("// Testing strategy for the constructor of GraphPoet")]),t._v(" "),i("li",[t._v("// Testing strategy for GraphPoet.toString()")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether the corpus is not exist")]),t._v(" "),i("li",[t._v("// whether the corpus is a empty file")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public String poem(String input)\n"),i("ul",[i("li",[t._v("// Testing strategy for GraphPoet.poem()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// Whether the input has the same edge")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])])]),t._v(" "),i("li",[t._v("public String toString()\n"),i("ul",[i("li",[t._v("// Testing strategy for the constructor of GraphPoet")]),t._v(" "),i("li",[t._v("// Testing strategy for GraphPoet.toString()")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether the corpus is not exist")]),t._v(" "),i("li",[t._v("// whether the corpus is a empty file")])])])]),t._v(" "),i("p",[t._v("在完成下一单元后，对其测试，测试结果：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image035.png",alt:"image035.png"}})]),t._v(" "),i("p",[t._v("可以看到，此时覆盖率为百分值百：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image036.png",alt:"image036.png"}})]),t._v(" "),i("p",[t._v("对部分测试策略分析：\n当输入文件为下方文件时：\n> To explore to explore interesting new interesting explore interesting explore strange new worlds\n> To seek out new life and new civilizations and civilizations and")]),t._v(" "),i("p",[t._v("此时graph如图所示：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image037.png",alt:"image037.png"}})]),t._v(" "),i("p",[t._v("当我们的输入语句为Seek to explore new and exciting synergies!时，此时对应的语句应该为Seek to explore interesting new civilizations and exciting synergies!\n当此时输入文件为下方字符时：")]),t._v(" "),i("p",[t._v("> To explore strange new worlds\n> To seek out new life and new civilizations")]),t._v(" "),i("p",[t._v("此时graph如图所示：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image038.png",alt:"image038.png"}})]),t._v(" "),i("p",[t._v("当我们的输入语句为Seek to explore new and exciting synergies!时，此时对应的语句应该为Seek to explore strange new life and exciting synergies!")]),t._v(" "),i("h5",{attrs:{id:"implement-graphpoet"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#implement-graphpoet"}},[t._v("#")]),t._v(" Implement GraphPoet")]),t._v(" "),i("ul",[i("li",[i("ol",[i("li",[t._v("public GraphPoet(File corpus)")])])])]),t._v(" "),i("p",[t._v('首先是文件的读取，采用System.getProperty("user.dir")的函数读取当前工作区，并加上路径，读取出所需的文件。')]),t._v(" "),i("p",[t._v("再通过BufferedReader、FileReader将文件读取到一个字符串中，再通过split函数，将所有空格消除，并读取到List中，再通过List中的removeAll函数，将所有的空字符串删除，此时即可得到文件中所有的单词，并保存到一个列表中。")]),t._v(" "),i("p",[t._v("依次对所有的单词遍历，若前一个节点及后一个节点都在图中，且weight++，否则令weight=1.")]),t._v(" "),i("ul",[i("li",[i("ol",{attrs:{start:"2"}},[i("li",[t._v("public String poem(String input)")])])])]),t._v(" "),i("p",[t._v("首先将input的输入通过split函数，切分为每个单词，并通过与GraphPoet相似的方法，获得单词的列表，此时我们用List中的顺序，每次取出第i个，及第i+1，如果第i个单词及第i+1个单词之间在图中存在别的单词连接，则将这个单词放到StringBuilder中。直到结束后，将最后一个单词也放进，并加上感叹号。")]),t._v(" "),i("p",[t._v("具体结构如下：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image039.png",alt:"image039.png"}})]),t._v(" "),i("h5",{attrs:{id:"graph-poetry-slam"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#graph-poetry-slam"}},[t._v("#")]),t._v(" Graph poetry slam")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image040.png",alt:"image040.png"}})]),t._v(" "),i("p",[t._v("对于如图所示的main函数，由于输入的文件为：\n> This is a test of the Mugar Omni Theater sound system.")]),t._v(" "),i("p",[t._v("因此在test与the中间存在of单词，因此输出结果应该为：Test of the system!")]),t._v(" "),i("p",[t._v("通过测试，所得结果与预期一致，完成预期要求。")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image041.png",alt:"image041.png"}})]),t._v(" "),i("h4",{attrs:{id:"使用eclemma检查测试的代码覆盖度"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#使用eclemma检查测试的代码覆盖度"}},[t._v("#")]),t._v(" 使用Eclemma检查测试的代码覆盖度")]),t._v(" "),i("p",[t._v("由于IDE采用IntelliJ IDEA 2020.3.1，此处使用IDEA内置的使用覆盖率测试：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image042.png",alt:"image042.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image043.png",alt:"image043.png"}})]),t._v(" "),i("p",[t._v("可以看到此时覆盖率为100%。")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image044.png",alt:"image044.png"}})]),t._v(" "),i("p",[t._v("将工作区复制到Ecilipse中，用Eclemma检测覆盖率，此时覆盖率仍然大约为95%左右。")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image045.png",alt:"image045.png"}})]),t._v(" "),i("h4",{attrs:{id:"before-you-re-done"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#before-you-re-done"}},[t._v("#")]),t._v(" Before you’re done")]),t._v(" "),i("p",[t._v("通过Git提交当前版本到GitHub上你的Lab2仓库。")]),t._v(" "),i("div",{staticClass:"language-shell extra-class"},[i("pre",{pre:!0,attrs:{class:"language-shell"}},[i("code",[i("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),i("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),i("span",{pre:!0,attrs:{class:"token string"}},[t._v('"P1"')]),t._v("\n"),i("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),i("p",[t._v("项目的目录结构树状示意图如下方所示：\n此处采用linux中的tree命令.")]),t._v(" "),i("h3",{attrs:{id:"re-implement-the-social-network-in-lab1"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#re-implement-the-social-network-in-lab1"}},[t._v("#")]),t._v(" Re-implement the Social Network in Lab1")]),t._v(" "),i("h4",{attrs:{id:"friendshipgraph类"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#friendshipgraph类"}},[t._v("#")]),t._v(" FriendshipGraph类")]),t._v(" "),i("ul",[i("li",[t._v("1.FriendshipGraph类有一个私有变量：\nprivate Graph<Person> graph = Graph.empty();")]),t._v(" "),i("li",[t._v("2.FriendshipGraph类的方法如下：")])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("意义")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public void checkRep()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("检查不变量")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean addVertex(Person person)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("添加顶点")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public boolean addEdge(Person person1,Person person2)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("添加边")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public int getDistance(Person person1,Person person2)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回从person1到person2的距离")])])])]),t._v(" "),i("p",[t._v("关系图如下：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image046.png",alt:"image046.png"}})]),t._v(" "),i("ul",[i("li",[t._v("// Abstraction function:")]),t._v(" "),i("li",[t._v("// 由Graph<Person> graph对应的图")]),t._v(" "),i("li",[t._v("// Representation invariant:")]),t._v(" "),i("li",[t._v("// graph中所有边的weight=0或=1，且顶点名字不为空")]),t._v(" "),i("li",[t._v("// Safety from rep exposure:")]),t._v(" "),i("li",[t._v("// 使用private、final修饰的变量")]),t._v(" "),i("li",[t._v("// 防御性复制")])]),t._v(" "),i("p",[t._v("checkRep如下：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image047.png",alt:"image047.png"}})]),t._v(" "),i("p",[t._v("getDistance的实现如下：")]),t._v(" "),i("ul",[i("li",[t._v("1.将person1保存到HashSet<Person> Search中；")]),t._v(" "),i("li",[t._v("2.将person1认识的人保存到HashSet<Person> Search_Next中；")]),t._v(" "),i("li",[t._v("3.将Search和Search_Next都保存到新的HashSet<Person> Search_assist中；")]),t._v(" "),i("li",[t._v("4.初始化distance = 1；")]),t._v(" "),i("li",[t._v("5.若Search_Next中含有person2，返回distance，即为所求距离。否则将Search清空，将Search_Next保存到Search中，在将Search中所有的人认识的人的HashSet中所有的元素添加到Search_Next，再将Search_Next中所有在Search_assist中保存的元素消除掉，再将所有Search_Next元素添加到Search_assist中。此时distance++；")]),t._v(" "),i("li",[t._v("6.重复步骤5，若Search_Next最终为空，则不存在距离，返回值为-1；否则，person1与person2之间存在路径，且 person1与person2距离为distance。")])]),t._v(" "),i("h4",{attrs:{id:"person类"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#person类"}},[t._v("#")]),t._v(" Person类")]),t._v(" "),i("ul",[i("li",[i("ol",[i("li",[t._v("Person类有一个私有变量：")])])])]),t._v(" "),i("p",[t._v("private final String name;")]),t._v(" "),i("ul",[i("li",[i("ol",{attrs:{start:"2"}},[i("li",[t._v("FriendshipGraph类的方法如下：")])])])]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("方法")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("意义")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public Person(String personName)")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("构造函数")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public void checkRep()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("检查不变量")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("public String getName()")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("返回当前Person的姓名")])])])]),t._v(" "),i("ul",[i("li",[t._v("// Abstraction function:")]),t._v(" "),i("li",[t._v("// 由String name对应的Person")]),t._v(" "),i("li",[t._v("// Representation invariant:")]),t._v(" "),i("li",[t._v("// name不为空")]),t._v(" "),i("li",[t._v("// Safety from rep exposure:")]),t._v(" "),i("li",[t._v("// 使用private、final修饰的变量")]),t._v(" "),i("li",[t._v("// 防御性复制")])]),t._v(" "),i("p",[t._v("checkRep如下：")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image048.png",alt:"image048.png"}})]),t._v(" "),i("h4",{attrs:{id:"客户端main"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#客户端main"}},[t._v("#")]),t._v(" 客户端main()")]),t._v(" "),i("p",[t._v("此处将重新利用Lab1中main客户端，由于对addVertex、addEdge、getDistance该函数均已完成，因此此处重新利用即可。\n运行发现，与预期结果一致。")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image049.png",alt:"image049.png"}})]),t._v(" "),i("h4",{attrs:{id:"测试用例"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#测试用例"}},[t._v("#")]),t._v(" 测试用例")]),t._v(" "),i("p",[t._v("对于FriendshipGraph类：")]),t._v(" "),i("ol",[i("li",[t._v("测试策略：")])]),t._v(" "),i("p",[t._v("1.1\tpublic boolean addVertex(Person person)")]),t._v(" "),i("ul",[i("li",[t._v("// Testing strategy for GraphPoet.addVertex()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// Whether the grapg is empty")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])]),t._v(" "),i("p",[t._v("1.2\tpublic boolean addEdge(Person person1,Person person2)")]),t._v(" "),i("ul",[i("li",[t._v("// Testing strategy for GraphPoet.addVertex()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// Whether the edge is in the graph")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.\n1.3\tpublic int getDistance(Person person1,Person person2)")]),t._v(" "),i("li",[t._v("// Testing strategy for GraphPoet.getDistance()")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// Is it possible to go from A to B")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])]),t._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[i("p",[t._v("测试结果")]),t._v(" "),i("p",[t._v("此处主要说明对getDistance的测试，其余部分详见代码。\n通过以下的图，对getDistance测试：\n由图可得，ben 与 a 的距离为 2，ben 与 kramer 的距离为 3，b 与 kramer的距离为 2，kramer 与 rachel 的距离为 5。\n并进行测试：")])])]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image050.png",alt:"image050.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image051.png",alt:"image051.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image052.png",alt:"image052.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image053.png",alt:"image053.png"}})]),t._v(" "),i("p",[t._v("可以发现，此时测试全部通过测试，并且代码覆盖率为100%.")]),t._v(" "),i("p",[t._v("对于Person类：")]),t._v(" "),i("ol",[i("li",[t._v("测试策略")])]),t._v(" "),i("ul",[i("li",[t._v("// Testing strategy for Person.getName")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Partition the inputs as follows:")]),t._v(" "),i("li",[t._v("// whether Person is null")]),t._v(" "),i("li",[t._v("//")]),t._v(" "),i("li",[t._v("// Exhaustive Cartesian coverage of partitions.")])]),t._v(" "),i("ol",{attrs:{start:"2"}},[i("li",[t._v("测试结果")])]),t._v(" "),i("p",[t._v("测试全部通过，并且代码覆盖率100%。")]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image054.png",alt:"image054.png"}})]),t._v(" "),i("p",[i("img",{attrs:{src:"/SoftwareConstruction/experiment2/image055.png",alt:"image055.png"}})]),t._v(" "),i("h4",{attrs:{id:"提交至git仓库"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#提交至git仓库"}},[t._v("#")]),t._v(" 提交至Git仓库")]),t._v(" "),i("p",[t._v("如何通过Git提交当前版本到GitHub上你的Lab2仓库。\n在这里给出你的项目的目录结构树状示意图。")]),t._v(" "),i("div",{staticClass:"language-shell extra-class"},[i("pre",{pre:!0,attrs:{class:"language-shell"}},[i("code",[i("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" "),i("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v(".")]),t._v("\n"),i("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),i("span",{pre:!0,attrs:{class:"token string"}},[t._v('"P2"')]),t._v("\n"),i("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push\n")])])]),i("p",[t._v("目录结构树状示意图如下所示：")]),t._v(" "),i("p",[t._v("此处采用linux中的tree命令.")]),t._v(" "),i("h2",{attrs:{id:"实验过程中遇到的困难与解决途径"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实验过程中遇到的困难与解决途径"}},[t._v("#")]),t._v(" 实验过程中遇到的困难与解决途径")]),t._v(" "),i("table",[i("thead",[i("tr",[i("th",{staticStyle:{"text-align":"center"}},[t._v("遇到的难点")]),t._v(" "),i("th",{staticStyle:{"text-align":"center"}},[t._v("解决途径")])])]),t._v(" "),i("tbody",[i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("泛型的转换最初理解起来稍有问难。")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("通过查阅资料并与同学讨论等途径解决。")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("对于题目某些部分理解起来稍有困难。")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("通过自己耐心探究解决。")])]),t._v(" "),i("tr",[i("td",{staticStyle:{"text-align":"center"}},[t._v("测试策略的设计。")]),t._v(" "),i("td",{staticStyle:{"text-align":"center"}},[t._v("通过查阅相关资料并加以体会解决。")])])])]),t._v(" "),i("h2",{attrs:{id:"实验过程中收获的经验、教训、感想"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#实验过程中收获的经验、教训、感想"}},[t._v("#")]),t._v(" 实验过程中收获的经验、教训、感想")]),t._v(" "),i("ul",[i("li",[t._v("1.掌握了在测试中，写出测试策略，并根据此设计测试用例的方法")]),t._v(" "),i("li",[t._v("2.了解了OOP实现ADT，并对RI、REP、AF等有了更深的了解")]),t._v(" "),i("li",[t._v("3.对于整个过程了解更加深刻")]),t._v(" "),i("li",[t._v("4.掌握了ADT设计的基本方法")]),t._v(" "),i("li",[t._v("5.了解了ADT的泛型化")]),t._v(" "),i("li",[t._v("6.意识到避免表示泄露的重要性，并在实践中，践行了保护的过程")])]),t._v(" "),i("h2",{attrs:{id:"针对以下方面的感受"}},[i("a",{staticClass:"header-anchor",attrs:{href:"#针对以下方面的感受"}},[t._v("#")]),t._v(" 针对以下方面的感受")]),t._v(" "),i("p",[t._v("(1)\t面向ADT的编程和直接面向应用场景编程，你体会到二者有何差异？")]),t._v(" "),i("p",[t._v("在面向ADT的编程设计，我们往往要考虑程序的功能、应用场景以及复用性，使编出的程序更加灵活；而面向应用场景编程，适用范围较小，但可以根据具体场景，灵活编程。")]),t._v(" "),i("p",[t._v("(2)\t使用泛型和不使用泛型的编程，对你来说有何差异？")]),t._v(" "),i("p",[t._v("使用泛型可以更改数据类型，如P2可以以Person为数据类型，在初次接触时有一些不适应，但很快便了解并掌握。泛型为程序的复用性带来了很大帮助，并且使类型更加安全。")]),t._v(" "),i("p",[t._v("(3)\t在给出ADT的规约后就开始编写测试用例，优势是什么？你是否能够适应这种测试方式？")]),t._v(" "),i("p",[t._v("先完成测试用例的编写能够让我更好的理解规格说明。规格说明也可能存在问题--不正确、不完整、模棱两可、确实边界情况。 因此先尝试编写测试用例，可以在我浪费时间实现一个有问题的规格说明之前发现这些问题。因此我能够适应这种测试方式。")]),t._v(" "),i("p",[t._v("(4)\tP1设计的ADT在多个应用场景下使用，这种复用带来什么好处？")]),t._v(" "),i("p",[t._v("避免重复实现具有类似功能的ADT，将已有代码进行复用，不仅在一定程度上节约了时间，同时还能进一步保证程序的正确性，避免写类似代码时，犯更多的错误。同时还能够锻炼我们的抽象能力，在实现ADT时候，充分考虑应用场景。")]),t._v(" "),i("p",[t._v("(5)\tP3要求你从0开始设计ADT并使用它们完成一个具体应用，你是否已适应从具体应用场景到ADT的“抽象映射”？相比起P1给出了ADT非常明确的rep和方法、ADT之间的逻辑关系，P3要求你自主设计这些内容，你的感受如何？")]),t._v(" "),i("p",[t._v("实验未要求P3.")]),t._v(" "),i("p",[t._v("(6)\t为ADT撰写specification, invariants, RI, AF，时刻注意ADT是否有rep exposure，这些工作的意义是什么？你是否愿意在以后编程中坚持这么做？")]),t._v(" "),i("p",[t._v("表示暴露影响程序的安全运行，同时影响到不变性和表示独立性处理表示暴露避免类内部数据被从外部访问。并且在编程时候在抽象类型表示声明后写上对于抽象函数和表示不变量的注解，可以便于读取表示不变量、抽象域的表示、规定合法的表示值如何被解释到抽象域。方便程序员的处理。以后也会坚持这个习惯。")]),t._v(" "),i("p",[t._v("(7)\t关于本实验的工作量、难度、deadline。")]),t._v(" "),i("p",[t._v("本实验工作量较大，尤其是编写测试时，耗费时间较长，难度可以接受，deadline比较合理。")]),t._v(" "),i("p",[t._v("(8)\t《软件构造》课程进展到目前，你对该课程有何体会和建议？")]),t._v(" "),i("p",[t._v("使我对软件构造有了新的感悟，一方面对程序的测试分区等有了新的体会，另一方面，对规范的注释等有了新的了解，另一方面更加体会到了面向对象编程，除此之外，更加了解了如何保证程序的安全运行。\n建议，对PPT内容扩充，方便同学们复习。")])])}),[],!1,null,null,null);e.default=v.exports}}]);