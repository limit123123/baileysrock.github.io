import{r as l,o as c,c as u,a as n,b as p,F as r,d as s,e as t}from"./app.b3845019.js";import{_ as i}from"./plugin-vue_export-helper.21dcd24c.js";var k="/DeepLearning/ReadingPapers/ResNet/1.png",o="/DeepLearning/ReadingPapers/ResNet/2.png",e="/DeepLearning/ReadingPapers/ResNet/3.png",m="/DeepLearning/ReadingPapers/ResNet/4.png",b="/DeepLearning/ReadingPapers/ResNet/5.png",h="/DeepLearning/ReadingPapers/ResNet/6.png";const d={},g=n("h2",{id:"\u8BBA\u6587\u540D\u79F0",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u8BBA\u6587\u540D\u79F0","aria-hidden":"true"},"#"),s(" \u8BBA\u6587\u540D\u79F0")],-1),x={href:"https://arxiv.org/abs/1512.03385",target:"_blank",rel:"noopener noreferrer"},_=s("Deep Residual Learning for Image Recognition"),y=t('<h2 id="\u6458\u8981" tabindex="-1"><a class="header-anchor" href="#\u6458\u8981" aria-hidden="true">#</a> \u6458\u8981</h2><p>\u6DF1\u7684\u795E\u7ECF\u7F51\u7EDC\u96BE\u4EE5\u8BAD\u7EC3\uFF0C\u4F5C\u8005\u63D0\u51FA\u6B8B\u5DEE\u5B66\u4E60\u7684\u6846\u67B6\uFF0C\u4F7F\u8BAD\u7EC3\u975E\u5E38\u6DF1\u7684\u7F51\u7EDC\u6BD4\u4E4B\u524D\u5BB9\u6613\u5F88\u591A\u3002\u5C06\u5404\u5C42\u91CD\u65B0\u8868\u8FF0\u4E3A\u5B66\u4E60\u53C2\u8003\u5C42\u8F93\u5165\u7684\u6B8B\u5DEE\u51FD\u6570\uFF0C\u800C\u4E0D\u662F\u672A\u53C2\u8003\u7684\u51FD\u6570\u3002</p><p>\u5B9E\u9A8C\u6548\u679C:\u5728ImageNet\u6570\u636E\u96C6\u4E0A\u8BC4\u4F30152\u5C42\u7684\u7F51\u7EDC\uFF0C\u6BD4VGG\u6DF18\u500D\uFF0C\u4F46\u590D\u6742\u5EA6\u8981\u4F4E\u4E8EVGG\u3002\u5B9E\u9A8C\u53D6\u5F97\u4E863.57%\u7684\u8BEF\u5DEE\uFF0C\u57282015\u5E74ILSVRC\u5206\u7C7B\u4EFB\u52A1\u83B7\u5F97\u7B2C\u4E00\u540D\uFF0C\u6B64\u5916\u8FD8\u6709100\u5C42\u548C1000\u5C42CIFAR-10\u7684\u5B9E\u9A8C\u5206\u6790\u3002<br> \u7F51\u7EDC\u7684\u6DF1\u5EA6\u5BF9\u5F88\u591A\u8BA1\u7B97\u673A\u89C6\u89C9\u4EFB\u52A1\u975E\u5E38\u91CD\u8981\uFF0C\u7531\u4E8E\u7F51\u7EDC\u8BBE\u7F6E\u7684\u975E\u5E38\u6DF1\uFF0C\u4F5C\u8005\u5728COCO\u7269\u4F53\u68C0\u6D4B\u6570\u636E\u96C6\u83B7\u5F9728%\u7684\u6539\u8FDB\uFF0C\u6B64\u5916\u8FD8\u8D62\u5F97\u4E86ImageNet\u68C0\u6D4B\u3001ImageNet\u5B9A\u4F4D\u3001COCO\u68C0\u6D4B\u548CCOCO\u5206\u5272\u7B49\u4EFB\u52A1\u7684\u7B2C\u4E00\u540D\u3002</p><h2 id="introduction" tabindex="-1"><a class="header-anchor" href="#introduction" aria-hidden="true">#</a> Introduction</h2><p>\u6DF1\u5EA6\u5377\u79EF\u795E\u7ECF\u7F51\u7EDC\u5728\u56FE\u7247\u5206\u7C7B\u4E0A\u53D6\u5F97\u4E86\u5F88\u5927\u7684\u7A81\u7834\uFF0C\u5E76\u4E14\u6DF1\u5EA6\u7F51\u7EDC\u81EA\u7136\u7684\u5C06\u4F4E\u4E2D\u9AD8\u7684\u7279\u5F81\u548C\u5206\u7C7B\u5668\u4EE5\u7AEF\u5230\u7AEF\u7684\u5F62\u5F0F\u6574\u5408\uFF0C\u5E76\u4E14\u53EF\u4EE5\u901A\u8FC7\u5806\u53E0\u5C42\u6570\uFF0C\u6DF1\u5EA6\u6765\u4E30\u5BCC\u7279\u5F81\u7684\u5C42\u6B21\u3002</p><p>\u7F51\u7EDC\u7684\u6DF1\u5EA6\u975E\u5E38\u91CD\u8981\uFF0C\u4F46\u662F\u4F5C\u8005\u629B\u51FA\u4E86\u4E00\u4E2A\u95EE\u9898:Is learning better networks as easy as stacking more layers?</p><p>\u5F53\u7F51\u7EDC\u5F88\u6DF1\u65F6\uFF0C\u5BB9\u6613\u51FA\u73B0\u68AF\u5EA6\u6D88\u5931\u3001\u68AF\u5EA6\u7206\u70B8\u7B49\u95EE\u9898\uFF0C\u89E3\u51B3\u65B9\u6848:1.\u521D\u59CB\u5316\u7684\u6743\u91CD\u4E0D\u5B9C\u8FC7\u5927\u4E5F\u4E0D\u5B9C\u8FC7\u5C0F 2.\u5728\u4E2D\u95F4\u52A0\u5165Normalization\uFF0C\u4F8B\u5982BN\u7B49\uFF0C\u53EF\u4EE5\u6821\u9A8C\u6BCF\u4E2A\u5C42\u4E4B\u95F4\u7684\u8F93\u51FA\u548C\u4ED6\u7684\u68AF\u5EA6\u7684\u5747\u503C\u548C\u65B9\u5DEE\u3002\u907F\u514D\u6709\u4E9B\u5C42\u8FC7\u5927\uFF0C\u6709\u4E9B\u5C42\u8FC7\u5C0F\u3002</p><p>\u4F7F\u7528\u4E0A\u8FF0\u65B9\u6CD5\u53EF\u4EE5\u4F7F\u7F51\u7EDC\u6536\u655B\uFF0C\u8FD9\u65F6\u4E00\u4E2A\u6B21\u8981\u7684\u95EE\u9898\u5C31\u66B4\u9732\u51FA\u6765\u4E86\u3002\u968F\u7740\u7F51\u7EDC\u7684\u6DF1\u5EA6\u589E\u52A0\uFF0C\u51C6\u786E\u5EA6\u4F1A\u8FBE\u5230\u9971\u548C\uFF0C\u7136\u540E\u8FC5\u901F\u9000\u5316\uFF0C\u8FD9\u79CD\u9000\u5316\u5E76\u4E0D\u662F\u7531\u4E8E\u8FC7\u62DF\u5408\u5F15\u8D77\u7684\uFF0C\u800C\u5728\u4E00\u4E2A\u9002\u5F53\u7684\u6DF1\u5EA6\u6A21\u578B\u4E0A\u589E\u52A0\u66F4\u591A\u7684\u5C42\u4F1A\u5BFC\u81F4\u66F4\u9AD8\u7684\u8BAD\u7EC3\u8BEF\u5DEE\u3002\u5982\u56FE\uFF0C\u5F53\u7F51\u7EDC\u7684\u6DF1\u5EA6\u589E\u52A0\u65F6\uFF0Ctrain error\u548Ctest error\u90FD\u5728\u589E\u52A0\u3002\u867D\u7136\u7F51\u7EDC\u6536\u655B\u4E86\uFF0C\u4F46\u8BAD\u7EC3\u7684\u6548\u679C\u4E0D\u7406\u60F3\u3002<br><img src="'+k+'" alt="acc degrade" loading="lazy"></p><p>\u56E0\u6B64\u7B80\u5355\u7684\u5806\u53E0\u5C42\u6570\uFF0C\u5E76\u4E0D\u80FD\u4F18\u5316\u7F51\u7EDC\u7684\u6027\u80FD\uFF0C\u5BF9\u4E00\u4E2A\u6D45\u5C42\u7F51\u7EDC\uFF0C\u5728\u5B83\u7684\u57FA\u7840\u4E0A\u6DFB\u52A0\u66F4\u591A\u5C42\uFF0C\u4F8B\u5982\u589E\u52A0\u5C42\u4EC5\u4EC5\u662F\u4E00\u4E00\u5BF9\u5E94\uFF0C\u4F8B\u5982\u8F93\u5165x\uFF0C\u8F93\u51FAx\uFF0C\u589E\u52A0\u7F51\u7EDC\u7684\u5C42\u6570\u81F3\u5C11\u4E0D\u5E94\u8BE5\u4F1A\u964D\u4F4E\u7F51\u7EDC\u7684\u6027\u80FD\u3002\u4F46\u5B9E\u9A8C\u8868\u660E\u6211\u4EEC\u76EE\u524D\u7684\u4F18\u5316\u5668\u65E0\u6CD5\u627E\u5230\u8FD9\u6837\u7684\u89E3\u51B3\u65B9\u6848\u3002</p>',9),f=n("p",null,[s("\u672C\u7247\u8BBA\u6587\u4E3B\u8981\u901A\u8FC7\u5F15\u5165\u6DF1\u5EA6\u6B8B\u5DEE\u5B66\u4E60\u6846\u67B6\u89E3\u51B3\u9000\u5316\u95EE\u9898\u3002\u4F5C\u8005\u4E0D\u5E0C\u671B\u51E0\u4E2A\u5806\u79EF\u5C42\u76F4\u63A5\u8BAD\u7EC3\u6240\u9700\u7684\u5E95\u5C42\u6620\u5C04\uFF0C\u800C\u662F\u8BA9\u8FD9\u4E9B\u5C42\u8BAD\u7EC3\u4E00\u4E2A\u5269\u4F59\u7684\u6620\u5C04"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"F"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",{mathvariant:"script"},"H"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"\u2212"),n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{F}(x)=\\mathcal{H}(x)-x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.09931em"}},"F"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.00965em"}},"H"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])]),s("\u3002")],-1),w=n("blockquote",null,[n("p",null,[s("\u89E3\u91CA:\u610F\u601D\u4E3A\u4F5C\u8005\u4E0D\u5E0C\u671B\u5806\u53E0\u540E\u7684\u7F51\u7EDC\u76F4\u63A5\u8BAD\u7EC3\u51FA\u6765"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"H"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{H}(x)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.00965em"}},"H"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")")])])]),s("\uFF0C\u56E0\u6B64\u4F5C\u8005\u5E0C\u671B\u5806\u53E0\u51FA\u6765\u7684\u5C42\uFF0C\u8BAD\u7EC3"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"F"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,":"),n("mo",null,"="),n("mi",{mathvariant:"script"},"H"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"\u2212"),n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{F}(x):=\\mathcal{H}(x)-x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.09931em"}},"F"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},":="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.00965em"}},"H"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])]),s("\uFF0C\u800C\u6B64\u65F6\u6D45\u5C42\u4ECD\u7136 \u4E3A\u6B64\u65F6\u539F\u59CB\u6620\u5C04\u5C31\u53D8\u6210\u4E86"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"F"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"+"),n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{F}(x)+x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.09931em"}},"F"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])]),s("\u3002"),n("br"),s(" \u4E2A\u4EBA\u7406\u89E3:x\u4E3A\u6D45\u5C42\u7F51\u7EDC\u5B66\u4E60\u5230\u8868\u5F81\uFF0C\u7ECF\u8FC7\u5806\u53E0\u7684\u5C42\u540E\u5F97\u5230\u7684\u6620\u5C04\u4E3A"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"H"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{H}(x)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.00965em"}},"H"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")")])])]),s("\uFF0C\u4F46\u4E0D\u8BA9\u8FD9\u4E2A\u5806\u53E0\u7684\u7F51\u7EDC\u76F4\u63A5\u8BAD\u7EC3\u5F97\u5230"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"H"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{H}(x)")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.00965em"}},"H"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")")])])]),s("\uFF0C\u56E0\u4E3A\u76F4\u63A5\u5B66\u4E60\u5230\u7684\u5F88\u6709\u53EF\u80FD\u6548\u679C\u4E0D\u5982\u6D45\u5C42\u7F51\u7EDC\uFF0C\u56E0\u6B64\u5E0C\u671B\u5B83\u5B66\u4E60"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"F"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",{mathvariant:"script"},"H"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"\u2212"),n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{F}(x)=\\mathcal{H}(x)-x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.09931em"}},"F"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.00965em"}},"H"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"\u2212"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])]),s("\uFF0C\u8FD9\u4E2A\u51FD\u6570\u66F4\u6613\u4E8E\u4F18\u5316\uFF0C\u5047\u5B9A\u6B64\u65F6\u6052\u7B49\u6620\u5C04\u66F4\u597D\uFF0C\u5373"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"H"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{H}(x)=x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.00965em"}},"H"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])]),s("\uFF0C\u90A3\u4E48\u53EF\u4EE5\u4F7F\u5806\u53E0\u7684\u7F51\u7EDC\u5B66\u4E60\u5230\u7684\u4E3A"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"F"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",{lspace:"0em",rspace:"0em"},"\u2192"),n("mn",null,"0")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{F}(x){\\rightarrow}0")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.09931em"}},"F"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mord"},[n("span",{class:"mrel"},"\u2192")]),n("span",{class:"mord"},"0")])])]),s(",\u5373\u5C06\u6B8B\u5DEE\u90E8\u5206\u63A8\u52300\uFF0C\u6B64\u65F6"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"H"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"="),n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{H}(x)=x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.00965em"}},"H"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}}),n("span",{class:"mrel"},"="),n("span",{class:"mspace",style:{"margin-right":"0.2778em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])]),s("\uFF0C\u6B64\u65F6\u81F3\u5C11\u53EF\u4EE5\u4FDD\u8BC1\u6548\u679C\u4E0D\u4F4E\u4E8E\u6D45\u5C42\u7F51\u7EDC\uFF0C\u82E5\u5806\u53E0\u7684\u5C42\u83B7\u5F97\u4E86\u66F4\u597D\u7684\u8868\u5F81\uFF0C\u5F88\u6709\u53EF\u80FD\u63D0\u5347\u7F51\u7EDC\u7684\u6027\u80FD\u3002")])],-1),v=n("p",null,[s("\u5982\u56FE:"),n("br"),n("img",{src:o,alt:"Residual learning",loading:"lazy"})],-1),N=n("p",null,[s("\u56E0\u6B64\uFF0C"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",{mathvariant:"script"},"F"),n("mo",{stretchy:"false"},"("),n("mi",null,"x"),n("mo",{stretchy:"false"},")"),n("mo",null,"+"),n("mi",null,"x")]),n("annotation",{encoding:"application/x-tex"},"\\mathcal{F}(x)+x")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathcal",style:{"margin-right":"0.09931em"}},"F"),n("span",{class:"mopen"},"("),n("span",{class:"mord mathnormal"},"x"),n("span",{class:"mclose"},")"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}}),n("span",{class:"mbin"},"+"),n("span",{class:"mspace",style:{"margin-right":"0.2222em"}})]),n("span",{class:"base"},[n("span",{class:"strut",style:{height:"0.4306em"}}),n("span",{class:"mord mathnormal"},"x")])])]),s("\u53EF\u4EE5\u88AB\u8BA4\u4E3A\u662F\u6709\u6377\u5F84\u7684\u8FDE\u63A5\u7684\u524D\u9988\u795E\u7ECF\u7F51\u7EDC\u3002\u5E76\u4E14\u53EA\u662F\u7B80\u5355\u7684\u8FDE\u63A5\uFF0C\u56E0\u6B64\u4E0D\u589E\u52A0\u989D\u5916\u7684\u53C2\u6570\uFF0C\u4E5F\u4E0D\u589E\u52A0\u8BA1\u7B97\u7684\u590D\u6742\u6027\uFF0C\u6574\u4E2A\u7F51\u7EDC\u4ECD\u7136\u53EF\u4EE5\u901A\u8FC7SGD\u53CD\u5411\u4F20\u64AD\u8FDB\u884C\u8BAD\u7EC3\u3002")],-1),R=t('<p>ResNet\u5728ILSVRC2015\u83B7\u5F97\u4E86\u7B2C\u4E00\u540D\uFF0Ctop-5\u7684\u9519\u8BEF\u7387\u4E3A3.57%\u3002\u6B64\u5916\u6781\u6DF1\u7684\u7F51\u7EDC\u589E\u5F3A\u4E86\u8868\u5F81\u80FD\u529B\uFF0C\u83B7\u5F97\u4E86ImageNet\u5B9A\u4F4D\u3001COCO\u68C0\u6D4B\u7684\u7B2C\u4E00\u540D\u3002</p><p>ImageNet\u3001CIFAR10\u4E0A\u7684\u5B9E\u9A8C\u8868\u660E:</p><ol><li>\u5177\u6709\u6B8B\u5DEE\u8FDE\u63A5\u7684\u7F51\u7EDC\u5F88\u5BB9\u6613\u4F18\u5316\uFF0C\u800C\u666E\u901A\u7684\u7F51\u7EDC\u5BB9\u6613\u8868\u73B0\u66F4\u9AD8\u7684\u8BEF\u5DEE\u3002</li><li>\u6DF1\u5EA6\u7684\u6B8B\u5DEE\u7F51\u7EDC\u53EF\u4EE5\u83B7\u5F97\u7F51\u7EDC\u6DF1\u5EA6\u589E\u52A0\u5E26\u6765\u7684\u6027\u80FD\u63D0\u5347\uFF0C\u7ED3\u679C\u8FDC\u8FDC\u4F18\u4E8E\u4EE5\u524D\u3002</li></ol><h2 id="\u6DF1\u5EA6\u6B8B\u5DEE\u8FDE\u63A5\u7F51\u7EDC" tabindex="-1"><a class="header-anchor" href="#\u6DF1\u5EA6\u6B8B\u5DEE\u8FDE\u63A5\u7F51\u7EDC" aria-hidden="true">#</a> \u6DF1\u5EA6\u6B8B\u5DEE\u8FDE\u63A5\u7F51\u7EDC</h2><h3 id="\u6B8B\u5DEE\u5B66\u4E60" tabindex="-1"><a class="header-anchor" href="#\u6B8B\u5DEE\u5B66\u4E60" aria-hidden="true">#</a> \u6B8B\u5DEE\u5B66\u4E60</h3><h3 id="\u7F51\u7EDC\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#\u7F51\u7EDC\u7ED3\u6784" aria-hidden="true">#</a> \u7F51\u7EDC\u7ED3\u6784</h3><p>\u5982\u4F55\u5904\u7406\u8F93\u5165\u548C\u8F93\u51FA\u4E0D\u4E00\u81F4\u7684\u60C5\u51B5:</p><ol><li>\u5728\u8F93\u5165\u548C\u8F93\u51FA\u4E0A\u5206\u522B\u6DFB\u52A00\u5728\u989D\u5916\u7684\u7EF4\u5EA6\u4E0A\uFF0C\u8FD9\u79CD\u65B9\u6CD5\u53EF\u4EE5\u51CF\u5C0F\u53C2\u6570\u3002</li><li>\u4F7F\u75281*1\u7684\u5377\u79EF\u6838\u5E76\u8BBE\u7F6E\u6B65\u957F\uFF0C\u4F7F\u901A\u9053\u6570\u3001\u9AD8\u5BBD\u5BF9\u9F50\u3002</li></ol><h3 id="\u5B9E\u9A8C\u76F8\u5173\u8BBE\u7F6E" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u9A8C\u76F8\u5173\u8BBE\u7F6E" aria-hidden="true">#</a> \u5B9E\u9A8C\u76F8\u5173\u8BBE\u7F6E</h3><p>\u7F51\u7EDC\u76F8\u5173\u8BBE\u7F6E:</p><ol><li>\u5BF9\u6BCF\u6B21\u5377\u79EF\u64CD\u4F5C\u540E\uFF0C\u6FC0\u6D3B\u51FD\u6570\u4E4B\u524D\u91C7\u7528Batch Normalization\u3002</li><li>batch-size = 256.</li><li>learning rate = 0.1, \u5F53\u9519\u8BEF\u7387\u6BD4\u8F83\u5E73\u6ED1\u65F6\u9664\u4EE510.</li><li>weight decay = 0.0001, momentum = 0.9.</li><li>\u4E0D\u4F7F\u7528dropout.</li></ol><p>\u6570\u636E\u5904\u7406:</p>',12),q=n("ol",null,[n("li",null,[s("\u5C06ImageNet\u7684\u6570\u636E\u96C6\uFF0C\u56FE\u50CF\u7684\u77ED\u8FB9\u653E\u5230"),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mo",{stretchy:"false"},"["),n("mn",null,"256"),n("mo",{separator:"true"},","),n("mn",null,"480"),n("mo",{stretchy:"false"},"]")]),n("annotation",{encoding:"application/x-tex"},"[256,480]")])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mopen"},"["),n("span",{class:"mord"},"256"),n("span",{class:"mpunct"},","),n("span",{class:"mspace",style:{"margin-right":"0.1667em"}}),n("span",{class:"mord"},"480"),n("span",{class:"mclose"},"]")])])]),s("\uFF0C\u5E76\u5BF9\u5176\u6C34\u5E73\u7FFB\u8F6C\uFF0C\u518D\u8FDB\u4E00\u6B65\u5BF9\u539F\u56FE\u50CF\u91C7\u6837\u6216\u6C34\u5E73\u7FFB\u8F6C\u540E\u7684\u56FE\u50CF\u91C7\u6837\uFF0C\u5E76\u51CF\u53BB\u6BCF\u4E2A\u50CF\u7D20\u7684\u5E73\u5747\u503C\u3002\u540C\u65F6\u4F7F\u7528\u6807\u51C6\u8272\u5F69\u589E\u5F3A\u3002\u8FD9\u6837\u5728\u5C06\u56FE\u50CF\u88C1\u526A\u4E3A224*224\u65F6\u5019\uFF0C\u968F\u673A\u6027\u66F4\u5F3A\u3002")]),n("li",null,"\u6D4B\u8BD5\u65F6\uFF0C\u6309\u7167\u4E00\u5B9A\u89C4\u5219\u91C7\u6837\u5341\u5F20\u56FE\u7247(\u5305\u542B\u5C06\u6700\u77ED\u8FB9\u6309\u7167[224,256,384,480,640]\u7F29\u653E)\uFF0C\u5C06\u5F97\u5230\u7684\u5206\u6570\u5E73\u5747\u3002")],-1),M=t('<h2 id="\u5B9E\u9A8C" tabindex="-1"><a class="header-anchor" href="#\u5B9E\u9A8C" aria-hidden="true">#</a> \u5B9E\u9A8C</h2><h3 id="imagenet" tabindex="-1"><a class="header-anchor" href="#imagenet" aria-hidden="true">#</a> ImageNet</h3><p>ImageNet2012\u6570\u636E\u96C6\u5305\u62EC1000\u5206\u7C7B\uFF0C\u6A21\u578B\u5728128\u4E07\u56FE\u7247\u4E0B\u8BAD\u7EC3\uFF0C\u5E76\u57285\u4E07\u5F20\u56FE\u7247\u4E0A\u9A8C\u8BC1\uFF0C\u6700\u7EC8\u572810\u4E07\u5F20\u56FE\u7247\u4E0A\u6D4B\u8BD5\u3002</p><p><strong>Plain Networks</strong>:\u9996\u5148\u8BC4\u4F3018\u5C42\u548C34\u5C42\u7684\u666E\u901A\u7F51\u7EDC\u3002\u7F51\u7EDC\u7ED3\u6784\u4E0B\u56FE\u6240\u793A\u3002<br><img src="'+e+'" alt="architecture" loading="lazy"><br> \u5B9E\u9A8C\u7ED3\u679C\u5982\u4E0B\u56FE\u6240\u793A\uFF0C\u7ED3\u679C\u8868\u660E\u8F83\u6DF1\u768434\u5C42\u6BD4\u8F83\u6D45\u768418\u5C42\u7F51\u7EDC\u7684\u9A8C\u8BC1\u8BEF\u5DEE\u8981\u9AD8\u3002<br><img src="'+m+'" alt="architecture" loading="lazy"></p><p>\u7531\u4E8E\u4F7F\u7528\u4E86Batch Normalization\uFF0C\u8FD9\u79CD\u4F18\u5316\u7684\u56F0\u96BE\u4E0D\u592A\u53EF\u80FD\u7531\u4E8E\u68AF\u5EA6\u6D88\u5931\u5F15\u8D77\u3002<br> \u4E0B\u56FE\u4E2D\uFF0C\u6211\u4EEC\u53EF\u4EE5\u89C2\u5BDF\u5230\uFF0C\u7531\u4E8E\u8BAD\u7EC3\u65F6\u8FD0\u7528\u4E86\u5927\u91CF\u6570\u636E\u589E\u5F3A\u7684\u65B9\u6CD5\uFF0C\u4E00\u5F00\u59CBtrain(\u7EA2\u8272)\u7684error\u8981\u9AD8\u4E8E\u9A8C\u8BC1\u96C6\uFF0C\u800C\u9A8C\u8BC1\u96C6\u4E0A\u566A\u97F3\u8F83\u4F4E\u3002\u7531\u4E8ESGD\u7684\u4F18\u5316\uFF0C\u4E24\u6B21\u8DF3\u8DC3\u4E3A\u5B66\u4E60\u7387*0.1\u3002(\u70BC\u4E39\u6280\u5DE7:\u524D\u671F\u8FDB\u5165\u5E73\u6ED1\u65F6\u53EF\u4EE5\u7EE7\u7EED\u5E73\u6ED1\u4E00\u4F1A\u513F\u540E\u518D\u5C06\u5B66\u4E60\u7387\u964D\u4F4E) \u540C\u65F6\u6709\u6B8B\u5DEE\u8FDE\u63A5\uFF0C\u6536\u655B\u7684\u66F4\u5FEB\u3002 <img src="'+b+'" alt="architecture" loading="lazy"></p><h2 id="\u4EE3\u7801\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u4EE3\u7801\u5B9E\u73B0" aria-hidden="true">#</a> \u4EE3\u7801\u5B9E\u73B0</h2><h3 id="basic-block\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#basic-block\u7684\u5B9E\u73B0" aria-hidden="true">#</a> Basic Block\u7684\u5B9E\u73B0</h3><p><img src="'+o+`" alt="basic block" loading="lazy"></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BasicBlock</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    expansion <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> downsample<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>BasicBlock<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>basicblock <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>downsample <span class="token operator">=</span> downsample

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        residual <span class="token operator">=</span> <span class="token builtin">input</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>basicblock<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">:</span>
            residual <span class="token operator">=</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">(</span>residual<span class="token punctuation">)</span>
        x <span class="token operator">+=</span> residual
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="bottle-neck\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#bottle-neck\u7684\u5B9E\u73B0" aria-hidden="true">#</a> Bottle Neck\u7684\u5B9E\u73B0</h3><p><img src="`+h+`" alt="bottle neck" loading="lazy"></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">BottleNeck</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># \u7EF4\u5EA6\u6269\u5F20</span>
    expansion <span class="token operator">=</span> <span class="token number">4</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> downsample<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>BottleNeck<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>bottleneck <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>out_channels<span class="token punctuation">,</span> out_channels <span class="token operator">*</span> self<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels <span class="token operator">*</span> self<span class="token punctuation">.</span>expansion<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>downsample <span class="token operator">=</span> downsample

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        residual <span class="token operator">=</span> <span class="token builtin">input</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bottleneck<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">:</span>
            residual <span class="token operator">=</span> self<span class="token punctuation">.</span>downsample<span class="token punctuation">(</span>residual<span class="token punctuation">)</span>
        x <span class="token operator">+=</span> residual
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="resnet\u5404\u4E2A\u7248\u672C\u7684\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#resnet\u5404\u4E2A\u7248\u672C\u7684\u5B9E\u73B0" aria-hidden="true">#</a> ResNet\u5404\u4E2A\u7248\u672C\u7684\u5B9E\u73B0</h3><p><img src="`+e+`" alt="architecture" loading="lazy"></p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">ResNet</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    ResNet\u7684\u5177\u4F53\u5B9E\u73B0
    &quot;&quot;&quot;</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">,</span> num_layer<span class="token punctuation">,</span> n_classes<span class="token punctuation">,</span> init_weights<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token builtin">super</span><span class="token punctuation">(</span>ResNet<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>in_channels <span class="token operator">=</span> <span class="token number">64</span>
        <span class="token comment"># \u5B9A\u4E49\u7F51\u7EDC\u7ED3\u6784</span>
        self<span class="token punctuation">.</span>conv1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>in_channels<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> out_channels<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>bn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>maxpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>MaxPool2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>relu <span class="token operator">=</span> nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>layer1 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> num_layer<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>layer2 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">,</span> num_layer<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>layer3 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> num_layer<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>layer4 <span class="token operator">=</span> self<span class="token punctuation">.</span>_make_layer<span class="token punctuation">(</span>block<span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> num_layer<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>avgpool <span class="token operator">=</span> nn<span class="token punctuation">.</span>AdaptiveAvgPool2d<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>flatten <span class="token operator">=</span> nn<span class="token punctuation">.</span>Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>fc <span class="token operator">=</span> nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">512</span> <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span> n_classes<span class="token punctuation">)</span>
        <span class="token keyword">if</span> init_weights <span class="token operator">==</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> m <span class="token keyword">in</span> self<span class="token punctuation">.</span>modules<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>kaiming_normal_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> mode<span class="token operator">=</span><span class="token string">&quot;fan_out&quot;</span><span class="token punctuation">,</span> nonlinearity<span class="token operator">=</span><span class="token string">&quot;relu&quot;</span><span class="token punctuation">)</span>
                <span class="token keyword">elif</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">)</span><span class="token punctuation">:</span>
                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>weight<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
                    nn<span class="token punctuation">.</span>init<span class="token punctuation">.</span>constant_<span class="token punctuation">(</span>m<span class="token punctuation">.</span>bias<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">_make_layer</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> block<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> num_block<span class="token punctuation">,</span> stride<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        downsample <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> stride <span class="token operator">!=</span> <span class="token number">1</span> <span class="token keyword">or</span> self<span class="token punctuation">.</span>in_channels <span class="token operator">!=</span> out_channels <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">:</span>
            downsample <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>
                nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in_channels<span class="token punctuation">,</span> out_channels <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> stride<span class="token operator">=</span>stride<span class="token punctuation">,</span> bias<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span>out_channels <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion<span class="token punctuation">)</span>
            <span class="token punctuation">)</span>
        layers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">,</span> stride<span class="token punctuation">,</span> downsample<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>in_channels <span class="token operator">=</span> out_channels <span class="token operator">*</span> block<span class="token punctuation">.</span>expansion
        <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>num_block<span class="token punctuation">)</span><span class="token punctuation">:</span>
            layers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>block<span class="token punctuation">(</span>self<span class="token punctuation">.</span>in_channels<span class="token punctuation">,</span> out_channels<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span><span class="token operator">*</span>layers<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>conv1<span class="token punctuation">(</span>inputs<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>bn1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>relu<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>maxpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer2<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer3<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>layer4<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

        x <span class="token operator">=</span> self<span class="token punctuation">.</span>avgpool<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>fc<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        x <span class="token operator">=</span> F<span class="token punctuation">.</span>softmax<span class="token punctuation">(</span>x<span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

<span class="token keyword">def</span> <span class="token function">ResNet18</span><span class="token punctuation">(</span>n_classes<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    \u6784\u9020ResNet18\u6A21\u578B
    :return: ResNet18
    &quot;&quot;&quot;</span>
    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>block<span class="token operator">=</span>BasicBlock<span class="token punctuation">,</span> num_layer<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n_classes<span class="token operator">=</span>n_classes<span class="token punctuation">)</span>
    <span class="token keyword">return</span> model

<span class="token keyword">def</span> <span class="token function">ResNet34</span><span class="token punctuation">(</span>n_classes<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    \u6784\u9020ResNet34\u6A21\u578B
    :return: ResNet34
    &quot;&quot;&quot;</span>
    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>block<span class="token operator">=</span>BasicBlock<span class="token punctuation">,</span> num_layer<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n_classes<span class="token operator">=</span>n_classes<span class="token punctuation">)</span>
    <span class="token keyword">return</span> model


<span class="token keyword">def</span> <span class="token function">ResNet50</span><span class="token punctuation">(</span>n_classes<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    \u6784\u9020ResNet50\u6A21\u578B
    :return: ResNet50
    &quot;&quot;&quot;</span>
    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>block<span class="token operator">=</span>BottleNeck<span class="token punctuation">,</span> num_layer<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n_classes<span class="token operator">=</span>n_classes<span class="token punctuation">)</span>
    <span class="token keyword">return</span> model

<span class="token keyword">def</span> <span class="token function">ResNet101</span><span class="token punctuation">(</span>n_classes<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    \u6784\u9020ResNet101\u6A21\u578B
    :return: ResNet101
    &quot;&quot;&quot;</span>
    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>block<span class="token operator">=</span>BottleNeck<span class="token punctuation">,</span> num_layer<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n_classes<span class="token operator">=</span>n_classes<span class="token punctuation">)</span>
    <span class="token keyword">return</span> model

<span class="token keyword">def</span> <span class="token function">ResNet152</span><span class="token punctuation">(</span>n_classes<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">&quot;&quot;&quot;
    \u6784\u9020ResNet152\u6A21\u578B
    :return: ResNet152
    &quot;&quot;&quot;</span>
    model <span class="token operator">=</span> ResNet<span class="token punctuation">(</span>block<span class="token operator">=</span>BottleNeck<span class="token punctuation">,</span> num_layer<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n_classes<span class="token operator">=</span>n_classes<span class="token punctuation">)</span>
    <span class="token keyword">return</span> model

</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br><span class="line-number">64</span><br><span class="line-number">65</span><br><span class="line-number">66</span><br><span class="line-number">67</span><br><span class="line-number">68</span><br><span class="line-number">69</span><br><span class="line-number">70</span><br><span class="line-number">71</span><br><span class="line-number">72</span><br><span class="line-number">73</span><br><span class="line-number">74</span><br><span class="line-number">75</span><br><span class="line-number">76</span><br><span class="line-number">77</span><br><span class="line-number">78</span><br><span class="line-number">79</span><br><span class="line-number">80</span><br><span class="line-number">81</span><br><span class="line-number">82</span><br><span class="line-number">83</span><br><span class="line-number">84</span><br><span class="line-number">85</span><br><span class="line-number">86</span><br><span class="line-number">87</span><br><span class="line-number">88</span><br><span class="line-number">89</span><br><span class="line-number">90</span><br><span class="line-number">91</span><br><span class="line-number">92</span><br><span class="line-number">93</span><br><span class="line-number">94</span><br><span class="line-number">95</span><br><span class="line-number">96</span><br><span class="line-number">97</span><br><span class="line-number">98</span><br><span class="line-number">99</span><br></div></div><h2 id="\u53C2\u8003\u6587\u732E" tabindex="-1"><a class="header-anchor" href="#\u53C2\u8003\u6587\u732E" aria-hidden="true">#</a> \u53C2\u8003\u6587\u732E</h2>`,16),F=s("[1] "),L={href:"https://zhuanlan.zhihu.com/p/129861013",target:"_blank",rel:"noopener noreferrer"},B=s("PyTorch\u5B9E\u73B0ResNet"),H=n("br",null,null,-1),C=s(" [2] "),z={href:"https://github.com/pytorch/vision/blob/main/torchvision/models/resnet.py",target:"_blank",rel:"noopener noreferrer"},I=s("PyTorch visions"),P=s(" [3] "),D={href:"https://arxiv.org/abs/1512.03385",target:"_blank",rel:"noopener noreferrer"},S=s("Deep Residual Learning for Image Recognition");function O(V,G){const a=l("ExternalLinkIcon");return c(),u(r,null,[g,n("p",null,[n("a",x,[_,p(a)])]),y,f,w,v,N,R,q,M,n("p",null,[F,n("a",L,[B,p(a)]),H,C,n("a",z,[I,p(a)]),P,n("a",D,[S,p(a)])])],64)}var A=i(d,[["render",O],["__file","ResNet.html.vue"]]);export{A as default};
